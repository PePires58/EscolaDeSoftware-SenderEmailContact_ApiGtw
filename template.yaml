AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: Escola de software - API Gateway - Send Email
Resources:
  SendEmailAPIGateway:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Sub "Api Gateway SendEmail"
      Description: !Sub "Escola de software - API Gateway - Send Email"
      EndpointConfiguration:
        Types:
          - REGIONAL
      FailOnWarnings: False
      Mode: overwrite

  SendEmailAPIGatewaySendEmailResource:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      RestApiId: !Ref SendEmailAPIGateway
      ParentId: !GetAtt
        - SendEmailAPIGateway
        - RootResourceId
      PathPart: "SendEmails"

  SendEmailApiGatewaySendEmailOptions:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      ApiKeyRequired: False
      ResourceId: !Ref SendEmailAPIGatewaySendEmailResource
      RestApiId: !Ref SendEmailAPIGateway
      HttpMethod: OPTIONS
      Integration:
        Type: MOCK
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'https://dak1pni58hzx7.cloudfront.net'"
            ResponseTemplates:
              application/json: ''
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            application/json: 'Empty'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: false
            method.response.header.Access-Control-Allow-Methods: false
            method.response.header.Access-Control-Allow-Origin: false

  SendEmailAPIGatewaySendEmailPost:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      ApiKeyRequired: False
      HttpMethod: POST
      Integration:
        IntegrationHttpMethod: POST
        IntegrationResponses:
          - StatusCode: 200
          - StatusCode: 400
          - StatusCode: 500
        TimeoutInMillis: 7000
        Type: AWS_PROXY
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:SendEmailContactFn/invocations"
      MethodResponses:
        - StatusCode: 200
        - StatusCode: 400
        - StatusCode: 500
      OperationName: POST /SendEmails
      ResourceId: !Ref SendEmailAPIGatewaySendEmailResource
      RestApiId: !Ref SendEmailAPIGateway

  SendEmailAPIGatewayDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn: SendEmailAPIGatewaySendEmailPost
    Properties:
      RestApiId: !Ref SendEmailAPIGateway
      Description: Escola de software - API Gateway - Send Email
      StageName: Prod

  #########  Permissions #########
  PutSendEmailResourceBasedPolicy:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Sub "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:SendEmailContactFn"
      Principal: apigateway.amazonaws.com
      SourceAccount: !Sub "${AWS::AccountId}"
      SourceArn:
        Fn::Join:
          [
            "",
            [
              "arn:",
              !Ref AWS::Partition,
              ":execute-api:",
              !Ref AWS::Region,
              ":",
              !Ref AWS::AccountId,
              ":",
              !Ref SendEmailAPIGateway,
              "/",
              !Sub "/POST/SendEmails",
            ],
          ]
